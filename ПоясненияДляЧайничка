    Класс QImage обеспечивает аппаратно-независимое представление изображения,
которое обеспечивает прямой доступ к данным пикселей и может использоваться в качестве
устройства рисования.

    Объект QTime содержит время часов, которое он может выражать как числа часов, минут,
секунд и миллисекунд, прошедших с полуночи. Он предоставляет функции для сравнения времени
и для управления временем, добавляя количество миллисекунд.

    Язык С позволяет определять имена новых типов данных с помощью ключевого слова typedef.

    С помощью QObject::startTimer() вы запускаете таймер с интервалом в миллисекундах в качестве аргумента.
Функция возвращает уникальный целочисленный идентификатор таймера. Таймер будет срабатывать через равные интервалы времени до тех пор, пока вы явно не вызовите QObject::killTimer() с идентификатором таймера.

    Класс QPainter выполняет низкоуровневую отрисовку виджетов и других устройств рисования.Он также может рисовать выровненный текст и растровые изображения.

    Макрос Q_UNUSED позволяет избежать предупреждений по поводу неиспользования какой-то переменной.
Пример:
void someFunc(int var) {
Q_UNUSED(var); //тут мы избавлемся от возможного предупреждения от компилятора
}

    Класс QString предоставляет строку символов Unicode.

    QFontMetrics вычисляют размер символов и строк для данного шрифта.

    QPaintEvent События рисования отправляются виджетам, которым необходимо обновить себя, например, когда часть виджета открыта из-за перемещения покрывающего виджета.


//MainWindow w;
//w.show();
//buttonExit.resize(70,40);//меняем размер

//QLabel *label=new QLabel("Let is started!");
//label->resize(700,700);//изменяем размер окна
//label->show();

//startWindow.setFixedSize(800,800);
//QPushButton buttonExit("Exit",&startWindow);

int maxCounter;
 QString messageMax = "Record";
 QString maxCounter_str = QString::number( maxCounter,10) ;
 qp.drawText(W_WIDTH/2 - 50, W_HEIGHT/2 + 60, messageMax);
 qp.drawText(W_WIDTH/2 + 50, W_HEIGHT/2 + 60, maxCounter_str);



